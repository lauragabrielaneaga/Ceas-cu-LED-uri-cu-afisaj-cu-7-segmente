/*********************************************
Project : Test software
**********************************************
Chip type: ATmega164A
Clock frequency: 20 MHz
Compilers:  CVAVR 2.x
*********************************************/

#include <mega164a.h>

#include <stdio.h>
#include <delay.h>  
#include <string.h> 
#include <stdlib.h>
#include <stdint.h>
#include "defs.h"    

//*************************************************************************************************
//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
//*************************************************************************************************

#ifndef RXB8
#define RXB8 1
#endif

#ifndef TXB8
#define TXB8 0
#endif

#ifndef UPE
#define UPE 2
#endif

#ifndef DOR
#define DOR 3
#endif

#ifndef FE
#define FE 4
#endif

#ifndef UDRE
#define UDRE 5
#endif

#ifndef RXC
#define RXC 7
#endif

#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<DOR)
#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)

// USART0 Receiver buffer
#define RX_BUFFER_SIZE0 8
char rx_buffer0[RX_BUFFER_SIZE0];

#if RX_BUFFER_SIZE0 <= 256
unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
#else
unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
#endif



// This flag is set on USART0 Receiver buffer overflow
bit rx_buffer_overflow0;

// USART0 Receiver interrupt service routine
interrupt [USART0_RXC] void usart0_rx_isr(void)
{
  char status, data;
  status = UCSR0A;
  data = UDR0;
  if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
    rx_buffer0[rx_wr_index0++] = data;
    #if RX_BUFFER_SIZE0 == 256
      // special case for receiver buffer size=256
      if (++rx_counter0 == 0) rx_buffer_overflow0 = 1;
    #else
      if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0 = 0;
      if (++rx_counter0 == RX_BUFFER_SIZE0)
          {
          rx_counter0=0;
          rx_buffer_overflow0=1;
          }
    #endif
  }
}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART0 Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
  char data;
  while (rx_counter0 == 0);
  data=rx_buffer0[rx_rd_index0++];
  #if RX_BUFFER_SIZE0 != 256
    if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0 = 0;
  #endif
  #asm("cli")
  --rx_counter0;
  #asm("sei")
  return data;
}
#pragma used-
#endif

// USART0 Transmitter buffer
#define TX_BUFFER_SIZE0 8
char tx_buffer0[TX_BUFFER_SIZE0];

#if TX_BUFFER_SIZE0 <= 256
unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
#else
unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
#endif

// USART0 Transmitter interrupt service routine
interrupt [USART0_TXC] void usart0_tx_isr(void)
{
if (tx_counter0)
   {
   --tx_counter0;
   UDR0=tx_buffer0[tx_rd_index0++];
#if TX_BUFFER_SIZE0 != 256
   if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
#endif
   }
}

#ifndef _DEBUG_TERMINAL_IO_
// Write a character to the USART0 Transmitter buffer
#define _ALTERNATE_PUTCHAR_
#pragma used+
void putchar(char c)
{
while (tx_counter0 == TX_BUFFER_SIZE0);
#asm("cli")
if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
   {
   tx_buffer0[tx_wr_index0++]=c;
#if TX_BUFFER_SIZE0 != 256
   if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
#endif
   ++tx_counter0;
   }
else
   UDR0=c;
#asm("sei")
}
#pragma used-
#endif

//*************************************************************************************************
//********************END SERIAL STUFF (USART0)  **************************************************
//*************************************************************************************************
//*******   if you need USART1, enable it in Code Wizard and copy coresponding code here  *********
//*************************************************************************************************
int cifra[11] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111, 0b01110111};
unsigned int minut_alarma, ora_alarma, ok = 0;

typedef struct Time {
    
    uint8_t an;
    uint8_t luna;
    uint8_t zi;
    uint8_t ora;
    uint8_t minut;
    uint8_t secunda;
} Time;

typedef struct Cronometru {

    uint8_t c_ora;
    uint8_t c_minut;
    uint8_t c_secunda;
} Cronometru;

typedef struct Alarma {

    uint8_t a_ora;
    uint8_t a_minut;
    uint8_t a_secunda;
} Alarma;

static Time currentTime = { .an = 21, .luna = 00, .zi = 00,
                            .ora = 01, .minut = 00, .secunda = 00 }; 
static Cronometru cronometruTime = { .c_ora = 00, .c_minut = 00, .c_secunda = 00 }; 
static Alarma alarmaTime = { .a_ora = 00, .a_minut = 00, .a_secunda = 00 }; 


/*
 * Timer 1 Output Compare A interrupt is used to blink LED
 */
interrupt [TIM1_COMPA] void timer1_compa_isr(void)
{
//LED1 = ~LED1; // invert LED  

    currentTime.secunda ++;
    cronometruTime.c_secunda ++;
    
    if (currentTime.secunda >= 60) {
        currentTime.secunda = 0;
        currentTime.minut ++;
    }
    if (currentTime.minut >= 60) {
        currentTime.minut = 0;
        currentTime.ora ++;
    }    
    if (currentTime.ora >= 24) {
        currentTime.ora = 0;
        currentTime.zi ++;
    }   
       
    // luni cu 31 de zile
    if (currentTime.luna == 1 || currentTime.luna == 3 ||currentTime.luna == 5 ||currentTime.luna == 7 ||currentTime.luna == 8 || currentTime.luna == 10 || currentTime.luna == 12) {
        if (currentTime.zi > 31) {
            currentTime.zi = 1;
            currentTime.luna ++;
        }
    }  
    
    // luni cu 30 de zile
    if (currentTime.luna == 4 || currentTime.luna == 6 ||currentTime.luna == 9 ||currentTime.luna == 11) {
        if (currentTime.zi > 30) {
            currentTime.zi = 1;
            currentTime.luna ++;
        }
    }       
    
    // februarie
    if (currentTime.luna == 2) {
        if (currentTime.an % 4 == 0) { // an bisect
            if (currentTime.zi > 29) {
                currentTime.zi = 1;
                currentTime.luna ++;
            }
        } else if (currentTime.zi > 28) {
            currentTime.zi = 1;
            currentTime.luna ++;
        }
    }

    if (currentTime.luna > 12) {
        currentTime.luna = 1;
        currentTime.an ++;
    } 
       
              
    //Cronometru
    if (cronometruTime.c_secunda >= 60) {
        cronometruTime.c_secunda = 0;
        cronometruTime.c_minut ++;
    }
    if (cronometruTime.c_minut >= 60) {
        cronometruTime.c_minut = 0; 
        cronometruTime.c_ora ++;
    }
    if (cronometruTime.c_ora >= 24) {
        cronometruTime.c_ora = 0;   
    }
                                       
}                                 

// ------------------functie afisare------------------------------------
void afisare(uint8_t param1, uint8_t param2, uint8_t param3)
{
    unsigned int DD0, DD1, DD2, DD3, DD4, DD5; 
    int i;
    DD0 = param1 / 10;      // led 1
    DD0 = cifra[DD0];

    DD1 = param1 % 10;      // led 2
    DD1 = cifra[DD1];
                            
    DD2 = param2 / 10;      // led 3
    DD2 = cifra[DD2];

    DD3 = param2 % 10;      // led 4
    DD3 = cifra[DD3];

    DD4 = param3 / 10;      // led 5
    DD4 = cifra[DD4];

    DD5 = param3 % 10;      // led 6
    DD5 = cifra[DD5];


    for (i = 0; i<=10; i++) {
        PORTA = DD0;
        afisaj_1 = 1;      // Selectie afisaj 1
        afisaj_2 = 0;
        afisaj_3 = 0;
        afisaj_4 = 0;
        afisaj_5 = 0;
        afisaj_6 = 0;
        delay_ms(1);

        PORTA = DD1;
        afisaj_1 = 0;      // Selectie afisaj 2
        afisaj_2 = 1;
        afisaj_3 = 0;
        afisaj_4 = 0;
        afisaj_5 = 0;
        afisaj_6 = 0;
        delay_ms(1);

        PORTA = DD2;
        afisaj_1 = 0;      // Selectie afisaj 3
        afisaj_2 = 0;
        afisaj_3 = 1;
        afisaj_4 = 0;
        afisaj_5 = 0;
        afisaj_6 = 0;
        delay_ms(1);

        PORTA = DD3;
        afisaj_1 = 0;      // Selectie afisaj 4
        afisaj_2 = 0;
        afisaj_3 = 0;
        afisaj_4 = 1;
        afisaj_5 = 0;
        afisaj_6 = 0;
        delay_ms(1); 

        PORTA = DD4;
        afisaj_1 = 0;      // Selectie afisaj 5
        afisaj_2 = 0;
        afisaj_3 = 0;
        afisaj_4 = 0;
        afisaj_5 = 1;
        afisaj_6 = 0;
        delay_ms(1);

        PORTA = DD5;
        afisaj_1 = 0;      // Selectie afisaj 6
        afisaj_2 = 0;
        afisaj_3 = 0;
        afisaj_4 = 0;
        afisaj_5 = 0;
        afisaj_6 = 1;
        delay_ms(1); 
    }
}


/*
 * main function of program
 */
void main (void)
{          
    unsigned char i, k = 0;
    unsigned int DD0, DD1, DD2, DD3, DD4, DD5;
    static int c0, c1, c2, c3, c4, c5;

    Init_initController();  // this must be the first "init" action/call!
    #asm("sei")             // enable interrupts
    LED1 = 1;               // initial state, will be changed by timer 1

    while (TRUE) {
        wdogtrig();            // call often else processor will reset


        // CALENDAR
        if (SW4 == 0) {  
            LED1 = 0;
            LED2 = 1;
            LED3 = 0;  
            LED4 = 0; 

            delay_ms(30);   // debounce switch
            if (SW4 == 0) {                
                while (SW4 == 0) wdogtrig();    // wait for release
                PORTA = 0x00;    // Turn OFF LEDs on PORTA

                do {
                    afisare(currentTime.zi, currentTime.luna, currentTime.an);

                    if (SW3 == 0) break;
                    if (SW5 == 0) break; 
                    if (SW6 == 0) break; 

                    if (SW7 == 0) { 
                        delay_ms(500);
                        if (SW7 == 0) { 
                            while (SW7 == 0) {
                                currentTime.luna ++;
                                afisare(currentTime.zi, currentTime.luna, currentTime.an);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                            }
                        }  
                        else { 
                            wdogtrig(); currentTime.luna++; 

                            do {
                                afisare(currentTime.zi, currentTime.luna, currentTime.an);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                                if (SW7 == 0) break;
                                if (SW8 == 0) break;

                            } while(1);
                        }  
                    } 

                    if (SW8 == 0) { 
                        delay_ms(30);
                        if (SW8 == 0) {
                            while (SW8 == 0) {
                                currentTime.zi ++; 
                                delay_ms(150);
                                afisare(currentTime.zi, currentTime.luna, currentTime.an);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                            }
                        }
                    }
                } while(1);          // endless loop
            }
        } 


        //ALARMA

        if (SW5 == 0) { 
            LED1 = 0;
            LED2 = 0;
            LED3 = 1;  
            LED4 = 0;

            delay_ms(30);   // debounce switch
            if (SW5 == 0) {                
                while (SW5 == 0) wdogtrig();    // wait for release
                    PORTA = cifra[10];    // Afisam caracterul A  
                    afisaj_1 = 1;      // Selectie afisaj 1
                    afisaj_2 = 0;
                    afisaj_3 = 0;
                    afisaj_4 = 0;
                    afisaj_5 = 0;
                    afisaj_6 = 0;  

                    delay_ms(1000); 

                do {
                    afisare(alarmaTime.a_ora, alarmaTime.a_minut, alarmaTime.a_secunda);

                    if (SW3 == 0) break;
                    if (SW4 == 0) break; 
                    if (SW6 == 0) break; 
                    if (SW7 == 0) { 
                        delay_ms(500);
                        if (SW7 == 0) {
                            while (SW7 == 0) {
                                alarmaTime.a_minut++;
                                    
                                    if (alarmaTime.a_minut >= 60) {
                                        alarmaTime.a_minut = 0;
                                        alarmaTime.a_ora ++;
                                    } 
                                       
                                    if (alarmaTime.a_ora >= 24) {
                                        alarmaTime.a_ora = 0;    
                                    }
                                       
                                minut_alarma = alarmaTime.a_minut; 
                                ok=0;
                                afisare(alarmaTime.a_ora, alarmaTime.a_minut, alarmaTime.a_secunda);

                                if (SW3 == 0)break;
                                if (SW4 == 0)break;
                                if (SW6 == 0)break;
                                // if(SW5 == 0)break;
                            }
                        }  
                        else { 
                            wdogtrig(); 
                            alarmaTime.a_minut++;   
                            
                                    if (alarmaTime.a_minut >= 60) {
                                        alarmaTime.a_minut = 0;
                                        alarmaTime.a_ora ++;
                                    } 
                                       
                                    if (alarmaTime.a_ora >= 24) {
                                        alarmaTime.a_ora = 0;    
                                    }
                                    
                            minut_alarma = alarmaTime.a_minut; 
                            ok=0; 
                            
                            do {
                                afisare(alarmaTime.a_ora, alarmaTime.a_minut, alarmaTime.a_secunda);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                                if (SW8 == 0) break;
                                if (SW7 == 0) break;
                            } while(1);
                        }  
                    }  

                    if (SW8 == 0) { 
                        delay_ms(30);
                        if (SW8 == 0) { 
                            while (SW8 == 0) {
                                alarmaTime.a_ora ++; 
                                
                                    if (alarmaTime.a_minut >= 60) {
                                        alarmaTime.a_minut = 0;
                                        alarmaTime.a_ora ++;
                                    } 
                                       
                                    if (alarmaTime.a_ora >= 24) {
                                        alarmaTime.a_ora = 0;
                                        
                                    }  
                                    
                                delay_ms(150);
                                ora_alarma = alarmaTime.a_ora;
                                ok=0;
                                afisare(alarmaTime.a_ora, alarmaTime.a_minut, alarmaTime.a_secunda);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                            }
                        }     
                    }
                } while(1);          // endless loop
            }                           
        }  


        //CRONOMETRU   

        if (SW6 == 0) { 
            LED1 = 0;
            LED2 = 0;
            LED3 = 0;  
            LED4 = 1;

            delay_ms(30);   // debounce switch
            if (SW6 == 0) {                
                while (SW6 == 0) wdogtrig();    // wait for release
                k++;

                PORTA = 0x39;      //Afisam caracterul C
                afisaj_1 = 1;      // Selectie afisaj 1
                afisaj_2 = 0;
                afisaj_3 = 0;
                afisaj_4 = 0;
                afisaj_5 = 0;
                afisaj_6 = 0; 
                
            
                //Pornire cronometru
                if (k == 2) {
                    cronometruTime.c_ora = 0; 
                    cronometruTime.c_minut = 0;
                    cronometruTime.c_secunda = 0;

                    do {
                        afisare(cronometruTime.c_ora, cronometruTime.c_minut, cronometruTime.c_secunda);
                        
                        if (SW3 == 0) break;
                        if (SW4 == 0) break;
                        if (SW5 == 0) break; 
                        if (SW6 == 0) break;
                        if (SW7 == 0) break;
                        if (SW8 == 0) break;                       
                    } while(1);          // endless loop  
                } 


                //Oprire cronometru
                if (k == 3) {
                    k = 0;

                    c0 = cronometruTime.c_ora/10;         // led 1 
                    c1 = cronometruTime.c_ora%10;         // led 2
                    c2 = cronometruTime.c_minut/10;       // led 3
                    c3 = cronometruTime.c_minut%10;       // led 4
                    c4 = cronometruTime.c_secunda/10;     // led 5
                    c5 = cronometruTime.c_secunda%10;     // led 6

                    do {     
                        DD0 = cifra[c0];
                        DD1 = cifra[c1];
                        DD2 = cifra[c2];
                        DD3 = cifra[c3];
                        DD4 = cifra[c4];
                        DD5 = cifra[c5];

                        for (i = 0; i <= 10; i++) {
                            PORTA = DD0;
                            afisaj_1 = 1;      // Selectie afisaj 1
                            afisaj_2 = 0;
                            afisaj_3 = 0;
                            afisaj_4 = 0;
                            afisaj_5 = 0;
                            afisaj_6 = 0;
                            delay_ms(1);

                            PORTA = DD1;
                            afisaj_1 = 0;      // Selectie afisaj 2
                            afisaj_2 = 1;
                            afisaj_3 = 0;
                            afisaj_4 = 0;
                            afisaj_5 = 0;
                            afisaj_6 = 0;
                            delay_ms(1);

                            PORTA = DD2;
                            afisaj_1 = 0;      // Selectie afisaj 3
                            afisaj_2 = 0;
                            afisaj_3 = 1;
                            afisaj_4 = 0;
                            afisaj_5 = 0;
                            afisaj_6 = 0;
                            delay_ms(1);

                            PORTA = DD3;
                            afisaj_1 = 0;      // Selectie afisaj 4
                            afisaj_2 = 0;
                            afisaj_3 = 0;
                            afisaj_4 = 1;
                            afisaj_5 = 0;
                            afisaj_6 = 0;
                            delay_ms(1); 

                            PORTA = DD4;
                            afisaj_1 = 0;      // Selectie afisaj 5
                            afisaj_2 = 0;
                            afisaj_3 = 0;
                            afisaj_4 = 0;
                            afisaj_5 = 1;
                            afisaj_6 = 0;
                            delay_ms(1);

                            PORTA = DD5;
                            afisaj_1 = 0;      // Selectie afisaj 6
                            afisaj_2 = 0;
                            afisaj_3 = 0;
                            afisaj_4 = 0;
                            afisaj_5 = 0;
                            afisaj_6 = 1;
                            delay_ms(1); 
                        } 

                        if (SW3 == 0) break;
                        if (SW4 == 0) break;
                        if (SW5 == 0) break; 
                        if (SW6 == 0) break;
                    } while(1);          // endless loop  
                }
            }  
        }  


        //CEAS 
        if (SW3 == 0) {  
            LED1 = 1;
            LED2 = 0;
            LED3 = 0;  
            LED4 = 0;  

            delay_ms(30);   // debounce switch
            if (SW3 == 0) {                
                while (SW3 == 0) wdogtrig();    // wait for release

                PORTA = 0x00;    // Turn OFF LEDs on PORTA

                do {   
                  
                          DD0 = currentTime.ora/10;      // led 1
                          DD0 = cifra[DD0];
                          
                          DD1 = currentTime.ora%10;      // led 2
                          DD1 = cifra[DD1];
                          
                          DD2 = currentTime.minut/10;    // led 3
                          DD2 = cifra[DD2];
                           
                          DD3 = currentTime.minut%10;    // led 4
                          DD3 = cifra[DD3];
                          
                          DD4 = currentTime.secunda/10;  // led 5
                          DD4 = cifra[DD4];
                          
                          DD5 = currentTime.secunda%10;  // led 6
                          DD5 = cifra[DD5];
                     
                  
                          for (i = 0; i<=10; i++) {
                                  PORTA = DD0;
                                  afisaj_1 = 1;      // Selectie afisaj 1
                                  afisaj_2 = 0;
                                  afisaj_3 = 0;
                                  afisaj_4 = 0;
                                  afisaj_5 = 0;
                                  afisaj_6 = 0;
                                  delay_ms(1);
                                  
                                  PORTA = DD1;
                                  afisaj_1 = 0;      // Selectie afisaj 2
                                  afisaj_2 = 1;
                                  afisaj_3 = 0;
                                  afisaj_4 = 0;
                                  afisaj_5 = 0;
                                  afisaj_6 = 0;
                                  delay_ms(1);
                                  
                                  PORTA = DD2;
                                  afisaj_1 = 0;      // Selectie afisaj 3
                                  afisaj_2 = 0;
                                  afisaj_3 = 1;
                                  afisaj_4 = 0;
                                  afisaj_5 = 0;
                                  afisaj_6 = 0;
                                  delay_ms(1);
                                  
                                  PORTA = DD3;
                                  afisaj_1 = 0;      // Selectie afisaj 4
                                  afisaj_2 = 0;
                                  afisaj_3 = 0;
                                  afisaj_4 = 1;
                                  afisaj_5 = 0;
                                  afisaj_6 = 0;
                                  delay_ms(1); 
                                  
                                  PORTA = DD4;
                                  afisaj_1 = 0;      // Selectie afisaj 5
                                  afisaj_2 = 0;
                                  afisaj_3 = 0;
                                  afisaj_4 = 0;
                                  afisaj_5 = 1;
                                  afisaj_6 = 0;
                                  delay_ms(1);
                                  
                                  PORTA = DD5;
                                  afisaj_1 = 0;      // Selectie afisaj 6
                                  afisaj_2 = 0;
                                  afisaj_3 = 0;
                                  afisaj_4 = 0;
                                  afisaj_5 = 0;
                                  afisaj_6 = 1;
                                  delay_ms(1); 
                           
                               
                            while((currentTime.minut == minut_alarma)&&(currentTime.ora == ora_alarma)&&(ok == 0))
                                   
                              {         
                                            while(1)
                                            
                                             {
                                                   for(i=0;i<10;i++){
                                                   
                                                    buzzer = 1;
                                                    delay_ms(1.6); 
                                                    
                                                    buzzer = 0;
                                                    delay_ms(1.6);   
                                                    
                                                    if(SW3 == 0) break;
                                                    if(SW4 == 0) break;
                                                    if(SW5 == 0) break;
                                                    if(SW6 == 0) break;    
                                                    }
                                                    
                                                    for(i=0;i<10;i++){
                                                   
                                                    buzzer = 1;
                                                    delay_ms(1); 
                                                    
                                                    buzzer = 0;
                                                    delay_ms(1);   
                                                    
                                                    if(SW3 == 0) break;
                                                    if(SW4 == 0) break;
                                                    if(SW5 == 0) break;
                                                    if(SW6 == 0) break;    
                                                    }
                                                    
                                                    for(i=0;i<10;i++){
                                                   
                                                    buzzer = 1;
                                                    delay_ms(2.5); 
                                                    
                                                    buzzer = 0;
                                                    delay_ms(2.5);   
                                                    
                                                    if(SW3 == 0) break;
                                                    if(SW4 == 0) break;
                                                    if(SW5 == 0) break;
                                                    if(SW6 == 0) break;    
                                                    }
                                                    

                                                    if(SW3 == 0) break;
                                                    if(SW4 == 0) break;
                                                    if(SW5 == 0) break;
                                                    if(SW6 == 0) break;
                                                  
                                                  
                                                  
                                              }
                                          
                                            if(SW5 == 0) {ok=1; break;}                              
              
                            }   
                                  
                              }
                                  
                    
                    if (SW4 == 0) break;
                    if (SW5 == 0) break; 
                    if (SW6 == 0) break; 
                    
                    if (SW7 == 0) { 
                        delay_ms(500);
                        if (SW7 == 0) {
                            while (SW7 == 0) {
                                currentTime.minut ++;
                                afisare(currentTime.ora, currentTime.minut, currentTime.secunda);
                                
                               
                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                            }
                        } else { 
                            wdogtrig();
                            currentTime.minut++; 

                            do {
                                afisare(currentTime.ora, currentTime.minut, currentTime.secunda);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                                if (SW7 == 0) break;
                                if (SW8 == 0) break;
                            } while(1);
                        }  
                    } 

                    if (SW8 == 0) { 
                        delay_ms(30);
                        if (SW8 == 0) { 
                            while (SW8 == 0) {
                                currentTime.ora ++; 
                                delay_ms(150);
                                afisare(currentTime.ora, currentTime.minut, currentTime.secunda);

                                if (SW3 == 0) break;
                                if (SW4 == 0) break;
                                if (SW5 == 0) break;
                                if (SW6 == 0) break;
                            }
                        }     
                    }
                } while(1);          // endless loop   
            }    
        }
    }
}// end main loop 
